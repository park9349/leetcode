public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        int[] first_res = new int[0];
        if(nums1.length == 0)
            return first_res;
        if(nums2.length == 0)
            return first_res;
        nums1 = cutandsort(nums1);
        nums2 = cutandsort(nums2);
        int length;
        if(nums1.length > nums2.length)
            length = nums1.length;/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return FindTree(preorder, inorder);
    }
    private TreeNode FindTree(int[] preorder, int[] inorder) {
        if(inorder.length == 0)
            return null;
        //find middle part
        int mid_inorder = 0;
        int mid_preorder = 0;
        for(;;mid_inorder++) {
            if(inorder[mid_inorder] == preorder[mid_preorder])
                break;
        }
        TreeNode mid = new TreeNode(inorder[mid_inorder]);
        //find left part, may not exist
        int left_left = 0;
        int left_right = mid_inorder - 1;
        int left_length = left_right - left_left + 1;
        if (left_length == 0){
            mid.left = null;
        }else {
            int[] new_inorder_left = new int[left_length];
            int[] new_preorder_left = new int[left_length];
            for(int i = 0; i < left_length; i++) {
                new_inorder_left[i] = inorder[i];
                new_preorder_left[i] = preorder[i+1];
            }
            TreeNode LeftNode = FindTree(new_preorder_left, new_inorder_left);
            mid.left = LeftNode;
        }
        //find right part, may not exist
        int right_left = mid_inorder + 1;
        int right_right = inorder.length - 1;
        int right_length = right_right - right_left + 1;
        if (right_length == 0){
            mid.right = null;
        }else {
            int[] new_inorder_right = new int[right_length];
            int[] new_preorder_right = new int[right_length];
            for(int i = 0; i < right_length; i++) {
                new_inorder_right[i] = inorder[i + right_left];
                new_preorder_right[i] = preorder[i + right_left];
            }
            TreeNode RightNode = FindTree(new_preorder_right, new_inorder_right);
            mid.right = RightNode;
        }
        return mid;
    }
}
        else
            length = nums2.length;
        int[] temp_res = new int[length];
        int idx = 0;
        for(int i = 0,j = 0; (i < nums1.length)&&(j < nums2.length);){
            if(nums1[i] > nums2[j])
                j++;
            else if(nums1[i] < nums2[j])
                i++;
            else{
                temp_res[idx] = nums1[i];
                idx++;
                i++;
                j++;
            }
        }
        int[] real_res = new int[idx];
        for(int i = 0; i < idx;i++){
            real_res[i] = temp_res[i];
        }
        return real_res;
    }
    private int[] cutandsort(int[] nums){
        sort(nums,0,nums.length-1);
        return nums;
    }
    private void sort(int[] nums, int p, int q){
        int mid;
        if(q - p > 1){
            mid = find(nums,p,q);
            sort(nums,p,mid-1);
            sort(nums,mid+1,q);
        }
        if(q - p == 1){
            if(nums[p] > nums[q]){
                int temp = nums[p];
                nums[p] = nums[q];
                nums[q] = temp;
            }
        }
    }
    private int find(int[] nums, int p, int q){
        int mid = nums[q];
        int i,j;
        for(i = p-1,j = p;j <= q;j++){
            if(nums[j] <= mid){
                int temp = nums[j];
                nums[j] = nums[i+1];
                nums[i+1] = temp;
                i++;
            }
        }
        return i;
    }
}